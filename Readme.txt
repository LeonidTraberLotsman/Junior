	Кадры

	Если в реальном мире мы можем наблюдать как нечто неприрывное и строго
говоря реальный мир беспрерывен. Мы можем двигаться на бесконечно малые расстояния
и измерять бесконечно малые отрезки времени. (не считая неточность прибора измерения)
	Игры же строго поделены на кадры, такие промежутки времени,
которые отделяют вывод одной картинки на экран от выовода предыдущей. Кадр на английском
языке - frame. Существует такое важное понятие как frames per seconds - FPS - число 
кадро в секунду. Оно показывает производительность вашей игры. Если игра достаточно
простая, то всё будет посчитатно достаточно быстро. И можно показывать огромное количество 
картинок. Еслив  игре происходит много всяких вычислений (вы взорвали небоскрёб),
то на каждый кадр для вычислений потребуется значительно больше времени. Кадров в секунде
будет меньше.
	В конце предыдущего занятия нам удалось сделать телепортацию, но что если мы хотим
сделать плавное перемещение вверх как у условного лифта.
	
	[пишем код лифта и показываем]

transform.position=transform.position+ new Vector3(0,0.01f,0);

Тут стоит отдельно отметить, что указанное равно не то равно, которое мы
привыкли видеть на уроках математики. Оно скорее приравнивание. То есть
то, что слева будет равно тому, что находится справа от равно.
Справа мы видим некоторое выражение, которое мы предварительно посчитаем.
В этом выражении так же используется позиция куба (transform.position),
но подсчёт будет произведён до этого момента. Так что для C# нет никакого противоречия.

	Тут также указано нечто нам неизвестное -  Vector3. Вектором в математике
называются цифры через запятую. Почему мы используем концепцию векторов, а не просто цифр.
А дело всё в том, что у нас 3D игра.

	Что такое 3D?

	3D - three dimensional - Трёх мерный. Давайте подробнее взглянем на то, что такое
эта трёхмерность. Для начала задумаемся, есть ли одномерное (1D) нечто? По факту это линия,
одномерное пространство это линия. Можно вспомнить классическую школьную задачу,
где по дороге из одного города в другой едет автобус с какой-нибудь скоростью.
	Каждую точку на такой дороге можно однозначно отметить числом (количеством метров
от начала дороги). Если мы сообщим вам точку на дороге (12 456 см к примеру). Вы легко
сможете найти её. Точка отмечается всего одним числом, одним измерением. Поэтому
такое число является одноМЕРным.
	Представим себе, что есть поле по которому едет трактор. Вдоль одной стороны поля
проходит дорога и под прямым углом к ней проходит вторая дорога. Мы уже поняли как
цифрой отметить точку на дороге. У трактора на каждой дороге есть близжайшая точка.
Мы можем от дороги провести линию до трактора. Такая точка называется проекция на ось.
	С помощью проекций на обе оси мы можем однозначно определить положение трактора.
Две цифры будут называться координатами трактора. Так как цифр две, они будут записываться
 через запятую (1,2) и представляют из себя двумерный вектор.
	Двумерное пространство это плоскость, как участок земли, доска или лист бумаги.
Существуют 2D игры, в которых нет концепции глубины или высоты.
	Если в наш пример с полем пшиницы мы будем описывать положение птицы,
то к двум измерениям, мы можем прибавить высоту птицы над поверхностью земли. Тогда
у нас получется 3 цифры и птица уже находится не на плоскости, а в пространстве,
в объёме. Это 3D, трёхмерное пространство. Если бы мы сделали ещё одно 
измерение, то мы бы наткнулись на четырёмерное пространство.
	Но наш с вами мир является трёхмерным, так что нам сложно воспринять четырёмерность.
Матиматика же всемогуща в данном вопросе.

	Вектора

	Сложение векторов работает логично (x1,x2,x3)+(y1,y2,y3)=(x1+y1,x2+y2,x3+y3)
При вычитании мы аналогично это разность соответсвующих значений. Умножение векторов
в данном курсе нам не нужно. Арифметически же операции для векторов мы проводим
только в случае если у них одинаковое количество цифр.
	Векторами в трёхмерном пространстве мы обозначаем как точки, так и отрезки.
К примеру скорость в трёхмерном пространсве будет являться трёмерным вектором.

	Особенности данной строки

	Отдельно стоит отметить, что мы обычно разделяем десятичные дроби запятой, но тут
для этого используется точка, чтобы понимать, что начинается дробная часть, а не 
следующий элемент вектора.
	Также в С# мы будем приписывать к вектору ещё букву f, она обозначает, что
это дробь типа float (с плавающей запятой). Нет необходимости вникать на данном этапе.
Главное осознать, что так необходимо делать с дробями.

	Интерактивность

	Что отличает игры от той же самой мультипликации? Дело в интерактивности, возможности
игрока влиять на происходящее. Самый частый способ это использовать ввод с клавиатуры и
мыши. Для этого у нас существует такая штука как Input.GetKey

if(Input.GetKey(KeyCode.Space)){
...
}

Данный код будет выполнять содержимое только в случае если нажат пробел (Space).
Так мы можем сделать, чтобы наш лифт поднимался только пока мы держим клавишу.
Есть ещё две модификации GetKey

	GetKeyDown - активируется только в первый кадр нажатия клавиши. Удобно,
если мы хотим обработать единичное нажатие. К примеру кнопка метани гранаты должна
быть из этой серии. Иначе, кнопка может быть нажата два кадра подряд. А кидать две гранаты
игрок не хотел. Или если кнопка открывает дверь, а потом её закрывает. Если мы будем
обрабатывать открытие/закрытие каждый кадр, когда кнопка нажата, то дверь будет открываться
как бешенная 30 раз в секунду, а то, поменяется ли её состояние будет зависеть от того,
чётное ли количество кадров была нажата клавиша, это невозможно сделать человеческими 
усилиями, так что дверь будет принимать случайное положение. Игрок будет тыкать, пока
она не встанет в нужное. Это не то поведение которое нам нужно. Так же GetKeyDown
используется при стрельбе из неавтоматического оружия в шутерах.

	GetKeyUp - первый кадр, когда кнопка не нажата. Обычно используется в комбинации
с каким-то ещё действием на GetKeyUp. Так можно к примеру отследить отпускание кнопки.
Выстрел из лука должен работать так: при нажатии кнопки натяжение, при отпускании кнопки
выстрел.

Давайте привяжем малые телепортации в разные стороны на кнопки WASD.

[Копируем код с лифтом и ставим другие стороны]
