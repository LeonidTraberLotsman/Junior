	Паравозик

	В конце предыдущего занятия вы получили короутину, которая способна плавно переместить
наш объект из одной точки в другую, что может быть полезно в ряде игровых ситуаций. Другой 
интересной особенностью можно считать то, что мы можем сами указать две точки. В ходе 
данного занятия мы попробуем перейти к списку, научимся расставлять маршрутные точки и 
у нас будет нечто, что работает в трёммерном мире и может вечно ездить по маршруту как поезд.
	У нас будет набор станций A,B,C,D,E,F. С первой он едет на вторую, оттуда на третью.
С последней он вернётся на предпоследнюю, таким образом у нас есть необходимость хранить 
информацию о том, в которую сторону мы едем, в сторону конца или в сторону начала.

	Что такое списки?

	Мы можем создать такую сущность как список. Время от времени у нас возникает такая
необходимость. Очевидно, что в ряде случаев мы могли бы создать переменные из серии
x1, x2 ,x3 ... x20. Но у данной стратегии есть два очевидных недостатка, которые заключаются
в том, что для вас существует понимание того, что x1 идет перед x2 (xn перед xn+1), но такого
понятия как следующий нет при наименовании. Так же вам необходимо заранее знать точное число.
	В случае со списком, у нас нет такой необходимости. Он может иметь нужные нам элементы
в правильном порядке. Мы можем задать список командой List<тип данных> название; И обращаться
к каждому элементу списка по его порядковому номеру: нзвание списка[номер элемента].
Количество элементов в списке мы можем назвать длиной списка. Мы в любой момент сможем 
получить количество элементов из списка список.count.
	Создаём список:
	public List<Transform> points;
	[нужно спросить, что из этого считается названием, что типом данных]

	[В Unity создаём пустые объекты, кладём в список]

Теперь мы можем написать наш первый иенумератор
public IEnumerator Patrol()
	{
		while (true)
		{
			yield return Move(transform.position, points[currentStation].position, 60);

			
				currentStation++;
				
			



		}

	}


Как мы можем наблюдать оно спокойной доходит до конца, но далее начинается проблема, так
как он будет пытаться ехать в точку, которой не существует. Нет следующей станции для
последней станции.



	Булевы переменные

	Существует некоторое количество типов данных, каждым данным и каждой переменной
принято присуждать то, что в ней хранится. Есть цифры целые (integer) и дробные (float),
мы много раз наблюдали, как мы делали переменные из векторов и прочих приколов, которые
есть только в Unity. Так же вы можете спокойно использовать в качестве типов данных.
	Легчайший тип данных это булева переменная, она может хранить всего два значения, 
у них много имён: правда и ложь, истина и ложь, 0 и 1, да и нет. В C# мы называем их true
и false.
	Давайте создадим булеву переменную, которая будет хранить направление движения.
	public bool positive = true;


Нам необходимо проверять, достиг ли поезд конца, если достиг, мы меняем направление 
движения.Так же при обратном ходе нужно проверять, достигает ли поезд начала.
Тогда у нас получается следующий код: 

public IEnumerator Patrol() {
        while (true)
        {
			yield return Move(transform.position, points[currentStation].position, 60);

            if (positive)
            {
				currentStation++;
				if (currentStation == points.Count)
                {
					currentStation--;
					positive = false;

				}
            }
            else
            {
				currentStation--;
				if (currentStation == -1)
				{
					currentStation++;
					positive = true;

				}
			}
				

			
		}
		
	}