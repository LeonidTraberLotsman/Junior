
	Что такое игровые движки и зачем они нужны?

	Мешает ли нам что-то просто открыть блокнот и начать программировать игру?
В целом ничего не мешает, но по какой же тогда причине мы этого не делаем. А придумали
ещё какую-то дополнительную прослойку в виде игрового движка.
	На самом деле в семидесятые годы старые дядьки так и делали. Они садилиись и писали 
игру. Сели, написали игру, скажем шутер (стрелялку). Прежде чем писать механики
им понадобилось рассксазать компьюетеру как рисовать картинки в трёхмерном пространсвтве.
И что такое пространство, что если на пути вашего взгляда находится более одного объекта,
то надо нарисовать близжайший. Как работает физика, оптика, звук, куда сохранять файлы 
и так далее. Получилось так, что ребята занимались 80% проекта не очень творческими 
задачами, сидели переписывали учебники по физике, геометрии и так далее.
	Сделали игру, выдохнули, сели делать новую. Тут они осознают, что им не нужно
ещё раз для гоночной игры писать графику и оптику. Они могут копировать с шутера.
Остаётся переделать последние 10% игры. Сели делать ещё одну игру и опять скопировали
значительную часть. Так они пришли, что многие вещи работают похоже и их можно отдельно
от игры написать и потом использовать.
	Они выделили эти 80-90% работы в отдельный продукт и назвали игровым движком.
Существует огромное количество игровых движков. И лишь одним  из них является Unity.
Можно ещё вспомнить такие движки как Unreal Engine, Frostbyte, Source и многие другие.

	Что такое программирование?

	Для создания игр нам в первую очередь потребуется научиться программировать и 
данный курс будет посвящён в первую очередь программированию и изучению движка.
Прграмммирование есть процесс написания такого текста, который может быть понят компьютером.
Такой текст мы называем словом "код".
	В данном курсе мы будем учиться писать код на языке С# (читается си шарп), стоит
отдельно отметить, что данный язык используется не только в Unity, у него есть большое 
количество своих пременений. Правила языка универсальны, и с его помощью к примеру можно
писать приложения для Windows.
	В 70ые люди массово пользовались простыми текстовыми редакторами для написания кода.
Но сейчас открыть блокнот и начать писать туда было бы как минимум странно. Мы используем
так называемую Интегрированную среду разработки (далее IDE (ай дэ йе)), специальную 
программу, которая умеет подсвечивать слова разным цветом и крайне удобно работать
с мелкими мелочами типа незакрытых скобок. 
	Мы учимся именно языку, какой IDE вы пользуетесь не очень важно. Ваш навык не 
прикреплён к среде. Так мы можем открыть код в другой IDE  или тем же самым блокнотом.


	Про Unity hub

	Существует две разные программы, одна называется Unity hub, другая называется Unity.
Вам предлагается открыть именно Unity Hub и создать в нём новый проект. Для этого нужно
выбрать 3D и задать название. Проект будет открыт в Unity, Unity hub используется для
того, что менеджить большое количество проектов с разными версиями Unity.


	Язык

	Интерфейс Unity выполнен на английском языке и рассчитан на англоговорящих 
пользователей. В идеале данный курс следовало бы вести на английском языке, но
вероятно не все слушатели могут понимать его на слух. Так что в ходе курса некоторые
слова будут произносится на английском с русской граматикой. Мы могли бы говорить их 
переводы, но и у меня в интерфейсе и у вас в коде и интерфейсы используются слова
английские, а переводить мне у себя в голове, чтобы вы тут же переводили обратно
это бессмысленные упраженения на знания языка, так что я буду переводить
слово один раз для общего развития и далее использовать английское.

	Основные элементы интерфейса

	Слева мы можем найти вот такой вот список гейм обджектов (Game object - игровой 
объект). Такие игровые объекты могут существовать отдельно от всех остальных.
Это некоторые самостоятельные сущности, как к примеру свинья в minecraft.
	Сейчас у нас есть main camera и directional light. Два независимых объекта.

Когда мы выбираем некоторый гейм обджект мы можем уже справа найти для него список 
его компонентов. Данный список называется инспектор. 

[Можно попросить перечислить и посмотреть за реакцией]

Компоненты отвечают за некоторое отдельное свойство объекта, за то, что он не прозрачный,
что он светится, звучит и так далее.

[Показываем что трансформ есть всегда, поясняем, что значат его части.
Создаётся куб, который будет использоваться для демонстрации]

Вот тут есть сцена, это видение вас как геймдизайнера и гейм, это видение того, что есть
в игре. Обратим внимание, что в игре когда мы её выпускаем игрок не будет видеть окно 
сцены. и не будет обладать необходимыми навыками к примеру полёту и движению. 
Вам требуется сделать их самим.

Тут есть папка ассеты, это не паралельная вселенная, в которой появились папки.
Это самые обычные папки. Их можно открыть в проводнике виндовс.

[покзываем штуки]

Все файлы, которые вы используете в ходе разработки называются ассеты,
так мы можем так называть файлы сценария, звука, 3D модели и так далее.

Чтобы у нас не было лютого бардака в огромном количестве файлов нужно
сначала создать папки, в которые файлы будут складываться по категориям


[создаём папку скриптс и в ней делем первый скрипт, открываем]

Это первый наш скрипт, тут может существовать две функции. Старт и апдейт.
Я буду часто использовать термин в старте или в апдейте, он означает записанное между вот 
этими двумя скобками. 

[мини игра, угадай в старте ли мы]

Такие конструкции называются функции, они показывают, что должно происходить.

Ключевая разница между стартом и апдейтом в том, что старт выполняется один раз
при появлении объекта. Или при включении игры или про спавне объекта после.

Вся игра происходит пошагово, покадрово. Кадр не только картинка, но и время, которое
тратит компьютер на рисование такой картинки. Если что-то происходит условно постоянно, то
оно должно происходить каждый кадр.

Напишем Debug.Log("A"); Сначала в старт, а потом в апдейт.

[цепляем скрипт к кубу и запускаем]

Стоит отметить, что игра берёт к себе только сохранённые скрипты. Так если мы напишем 
скрипт и не сохраним, то игра будет работать в режими последнего сохранённого скрипта.

Пишем в старт transform.position=new Vector3(4,6,3);

[запускаем игру, наблюдаем как оно работает]

Это был пример телепортации. Как мы видим при выключении игры все изменения откатываются
на состояние до запуска.